package test

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/go-xorm/xorm"
	"github.com/linqiurong2021/patrol/src/services/patrol/libs"
	"github.com/linqiurong2021/patrol/src/services/patrol/services"
	"github.com/linqiurong2021/patrol/src/services/patrol/structs"
	"github.com/linqiurong2021/patrol/src/services/patrol/conf"
	"log"
	"strconv"
	"strings"
	"testing"
	"time"
)

func Text2Point(data []byte) []structs.Point {
	//
	dataArr := strings.Split(string(data),",")
	fmt.Printf("dataArr:%#v\n",dataArr)
	var points []structs.Point
	//
	for _,item :=range dataArr {
		point := strings.Fields(item)
		fmt.Printf("point:%#v\n",point)
		//
		longitude,_:=strconv.ParseFloat(point[1],64)
		latitude,_:=strconv.ParseFloat(point[0],64)
		var height float64
		fmt.Printf("longitude:%f,latitude:%f\n",longitude,latitude)
		p := structs.Point{
			Latitude: longitude,
			Longitude: latitude,
			Height: height,
		}
		fmt.Printf("%#v\n",p)
		points = append(points,p)
		fmt.Printf("points:%#v\n",points)
	}
	return points
}


func TestTextPoint2Point(t *testing.T)  {
	s := libs.NewGeometry()
	pointText := "POINT(118.18576 24.489584)"
	point := s.PointText2Point(pointText)
	fmt.Printf("%#v\n",point)
}

func TestTextPoint2Points(t *testing.T)  {
	s := libs.NewGeometry()
	pointText := "POINT(118.18576 24.489584)"
	points := s.PointText2Points(pointText)
	fmt.Printf("%#v\n",points)
}

func TestTextPolyline2Points(t *testing.T)  {
	s := libs.NewGeometry()
	pointText := "LINESTRING(118.18580627441 24.489547729492,118.18577575684 24.489524841309,118.18576049805 24.489471435547,118.18573760986 24.489490509033,118.18572235107 24.489492416382,118.18572998047 24.489473342896,118.18578338623 24.489496231079,118.18578338623 24.489496231079,118.18578338623 24.489496231079,118.18579864502 24.489545822144,118.18579864502 24.489553451538,118.18579864502 24.489555358887,118.18579864502 24.489555358887,118.18573760986 24.489534378052,118.18573760986 24.489534378052,118.1858291626 24.489515304565,118.1858291626 24.489515304565,118.18581390381 24.489473342896,118.18581390381 24.489473342896,118.18577575684 24.489444732666,118.18577575684 24.489444732666,118.18573760986 24.489465713501,118.18573760986 24.489465713501,118.18572235107 24.489749908447,118.18572235107 24.489749908447,118.18572235107 24.489744186401,118.18572235107 24.489744186401,118.18572235107 24.48973274231,118.18572235107 24.48973274231,118.18572235107 24.489728927612,118.18572235107 24.489728927612,118.18572998047 24.489730834961,118.18572998047 24.489730834961,118.18572998047 24.489734649658,118.18572998047 24.489734649658,118.18573760986 24.489740371704,118.18573760986 24.489740371704,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428)"
	points := s.Polyline2Points(pointText)
	fmt.Printf("Points: %#v\n",points)
}

func TestTextPolygon2Points(t *testing.T)  {
	s := libs.NewGeometry()
	pointText := "POLYGON((117.949993 24.606969,117.950014 24.606951,117.950033 24.606931,117.950057 24.606905,117.950074 24.606883,117.95009 24.606861,117.950108 24.606831,117.950123 24.606802,117.950157 24.606796,117.950206 24.606776,117.950249 24.606756,117.950276 24.606743,117.950307 24.606725,117.950337 24.606705,117.950366 24.60668,117.950394 24.606651,117.95042 24.606618,117.950441 24.606581,117.950451 24.606559,117.95048 24.606564,117.950615 24.606575,117.950624 24.606576,117.950635 24.606579,117.950653 24.606584,117.950659 24.606586,117.950673 24.606593,117.95067 24.606611,117.950665 24.606672,117.950684 24.606764,117.950738 24.606848,117.9508 24.606901,117.950849 24.606929,117.950882 24.606944,117.950911 24.606954,117.950949 24.606966,117.950984 24.606975,117.95126 24.607021,117.951297 24.607025,117.951326 24.607027,117.951356 24.607027,117.951386 24.607026,117.951417 24.607022,117.951456 24.607016,117.951492 24.607008,117.95153 24.606996,117.951574 24.606976,117.951622 24.606947,117.951664 24.60691,117.951694 24.606874,117.951717 24.606839,117.951738 24.606797,117.951752 24.606747,117.951758 24.606704,117.951759 24.606663,117.951755 24.606627,117.951748 24.606591,117.951739 24.606555,117.95173 24.606527,117.951719 24.606498,117.951604 24.606264,117.951604 24.606264,117.951549 24.606108,117.951534 24.606074,117.951514 24.60604,117.951495 24.606015,117.951471 24.605986,117.951434 24.605949,117.951405 24.605929,117.951223 24.605798,117.951239 24.605775,117.951255 24.605749,117.951266 24.605729,117.951269 24.60574,117.951286 24.605779,117.951307 24.605815,117.951333 24.605848,117.951364 24.605881,117.951404 24.605913,117.951435 24.605933,117.951485 24.60596,117.951546 24.605988,117.951617 24.606016,117.951665 24.606033,117.95171 24.606045,117.951743 24.606052,117.951777 24.606057,117.951821 24.606062,117.951855 24.606064,117.951901 24.606063,117.951941 24.60606,117.951978 24.606055,117.952011 24.606049,117.952046 24.60604,117.952086 24.606026,117.952138 24.606001,117.952185 24.605968,117.952219 24.605936,117.952243 24.605908,117.952259 24.605886,117.952274 24.605862,117.95229 24.605833,117.952326 24.605757,117.952331 24.605747,117.952442 24.60571,117.952486 24.605697,117.952702 24.605647,117.952816 24.60563,117.952951 24.605604,117.952962 24.605603,117.952996 24.6056,117.953041 24.605598,117.953273 24.605625,117.953306 24.605626,117.953333 24.605625,117.953378 24.605621,117.953407 24.605617,117.953455 24.605608,117.953497 24.605597,117.95353 24.605586,117.953564 24.605573,117.953596 24.605557,117.953625 24.605541,117.953652 24.605523,117.95368 24.605501,117.953692 24.605507,117.953695 24.605509,117.953732 24.605534,117.953951 24.605696,117.953977 24.605714,117.954011 24.605733,117.954058 24.605754,117.954149 24.605778,117.954269 24.605769,117.954348 24.605734,117.954391 24.605706,117.954422 24.605683,117.954487 24.605624,117.954534 24.605482,117.954502 24.605348,117.954428 24.60525,117.954441 24.605225,117.954456 24.605178,117.954463 24.605145,117.954467 24.605116,117.954469 24.605081,117.954469 24.605049,117.954467 24.605017,117.954462 24.604983,117.954453 24.604945,117.954442 24.604913,117.954405 24.604807,117.954389 24.604753,117.954388 24.604747,117.954363 24.604592,117.954362 24.604576,117.954371 24.604574,117.954411 24.604566,117.954463 24.604551,117.954502 24.604538,117.954595 24.604498,117.954622 24.604485,117.95465 24.604469,117.954681 24.604448,117.954688 24.604442,117.954707 24.604449,117.95474 24.604457,117.954771 24.604463,117.954828 24.60447,117.954908 24.604476,117.954992 24.60449,117.955026 24.604494,117.955066 24.604495,117.955118 24.604492,117.95515 24.604485,117.955171 24.604488,117.9558 24.604256,117.95615 24.603824,117.9562 24.603581,117.956262 24.603335,117.956341 24.603034,117.956471 24.602464,117.956513 24.602317,117.956518 24.602297,117.956339 24.601449,117.956312 24.601334,117.956256 24.601253,117.956201 24.601203,117.956166 24.601183,117.956137 24.601116,117.956112 24.601054,117.956115 24.601038,117.956116 24.600995,117.956115 24.600968,117.956113 24.600934,117.956104 24.600885,117.956082 24.600819,117.956054 24.60077,117.956005 24.600693,117.955874 24.60057,117.955797 24.60054,117.955752 24.600527,117.955709 24.600521,117.955676 24.600518,117.955637 24.600517,117.955595 24.600521,117.955589 24.600501,117.955589 24.600501,117.9556 24.600445,117.955603 24.600388,117.955592 24.600322,117.95557 24.600267,117.955544 24.600223,117.955516 24.600188,117.955486 24.600157,117.955487 24.600152,117.955489 24.600115,117.955487 24.600077,117.955482 24.600042,117.955474 24.600012,117.955463 24.599981,117.955452 24.599954,117.95544 24.599929,117.955422 24.599897,117.955401 24.599866,117.955376 24.599833,117.95531 24.599753,117.955281 24.599724,117.955253 24.599701,117.955228 24.599683,117.9552 24.599665,117.955174 24.59965,117.955147 24.599637,117.955121 24.599625,117.95509 24.599613,117.955061 24.599604,117.955036 24.599597,117.9549 24.599565,117.954868 24.599554,117.954818 24.599522,117.95478 24.599503,117.954722 24.59948,117.954691 24.59947,117.954653 24.59946,117.954621 24.599452,117.954506 24.599432,117.954472 24.599429,117.954378 24.599426,117.954338 24.599429,117.954306 24.599433,117.954252 24.599443,117.954212 24.599452,117.954176 24.599462,117.954052 24.599505,117.954051 24.599505,117.954048 24.599506,117.954024 24.599507,117.953982 24.599502,117.953886 24.599497,117.953738 24.599558,117.953672 24.599641,117.953664 24.599635,117.953628 24.599617,117.953595 24.599604,117.953565 24.599594,117.953538 24.599587,117.953511 24.599581,117.953483 24.599576,117.953448 24.599573,117.953418 24.599571,117.953384 24.599571,117.953349 24.599574,117.953307 24.59958,117.953249 24.599596,117.953186 24.599626,117.953122 24.599674,117.953067 24.599745,117.953041 24.599818,117.953033 24.59987,117.953033 24.599916,117.953039 24.599961,117.953032 24.599991,117.953026 24.600027,117.953024 24.600073,117.953031 24.600124,117.952991 24.60015,117.952883 24.600246,117.952847 24.600344,117.952839 24.600396,117.952839 24.600464,117.952856 24.600514,117.952869 24.600554,117.952925 24.600655,117.952971 24.60072,117.953042 24.600773,117.953109 24.600806,117.953162 24.600825,117.953151 24.600858,117.953143 24.600888,117.953138 24.600918,117.953135 24.600947,117.953135 24.600979,117.953136 24.601005,117.95314 24.60104,117.95315 24.601081,117.95316 24.60111,117.953156 24.601124,117.953147 24.601159,117.953143 24.601191,117.953141 24.601224,117.953143 24.601264,117.953153 24.601314,117.953174 24.601367,117.953201 24.601413,117.953227 24.601444,117.953205 24.601481,117.953185 24.601508,117.953154 24.601561,117.953132 24.601649,117.953136 24.601682,117.953119 24.601675,117.953093 24.601666,117.953064 24.601657,117.953008 24.601641,117.952949 24.60163,117.95288 24.601604,117.952832 24.601593,117.952788 24.601588,117.952753 24.601587,117.952717 24.601587,117.952674 24.601593,117.952631 24.601601,117.952592 24.601612,117.952556 24.601624,117.952437 24.601671,117.952433 24.601672,117.95241 24.601657,117.952379 24.60164,117.952351 24.601628,117.952301 24.601608,117.952293 24.601604,117.952253 24.601574,117.95222 24.601548,117.952203 24.601531,117.952202 24.601531,117.952192 24.601518,117.952192 24.601518,117.952188 24.601496,117.952162 24.601407,117.952115 24.601337,117.952078 24.601287,117.951966 24.601215,117.951859 24.601203,117.951811 24.601204,117.951759 24.601211,117.951655 24.601241,117.95149 24.601307,117.951456 24.601322,117.951432 24.601336,117.951405 24.601352,117.951367 24.601381,117.951329 24.601418,117.951303 24.601454,117.951271 24.601506,117.951257 24.601503,117.9512 24.601495,117.951071 24.601503,117.950962 24.601582,117.950914 24.601642,117.950881 24.601703,117.950871 24.601747,117.950774 24.601734,117.950601 24.601699,117.950563 24.601695,117.95051 24.601693,117.950435 24.601702,117.950337 24.601739,117.950245 24.601821,117.950195 24.601927,117.950192 24.602012,117.950199 24.602059,117.950207 24.602091,117.950218 24.602123,117.950234 24.60216,117.950268 24.602226,117.950288 24.602261,117.950265 24.602268,117.950222 24.602285,117.95019 24.6023,117.950162 24.602316,117.950136 24.602334,117.950119 24.602347,117.950098 24.602365,117.94981 24.602088,117.949774 24.602059,117.949743 24.602038,117.94971 24.60202,117.949666 24.602001,117.949617 24.601986,117.949559 24.601976,117.949497 24.601976,117.949444 24.601983,117.94939 24.601997,117.949338 24.602019,117.949291 24.602047,117.949256 24.602075,117.949176 24.602152,117.949152 24.602172,117.949127 24.602194,117.949089 24.602236,117.949052 24.602296,117.94903 24.60237,117.949028 24.602444,117.949042 24.602504,117.949059 24.602545,117.949078 24.60258,117.9491 24.602611,117.949132 24.60265,117.949132 24.602651,117.949133 24.602652,117.949135 24.602659,117.949135 24.602659,117.949141 24.602697,117.949031 24.60269,117.948996 24.602687,117.948943 24.602687,117.948768 24.602692,117.948764 24.602692,117.948762 24.602692,117.948746 24.602687,117.948722 24.60267,117.948682 24.602643,117.948628 24.602619,117.948566 24.602601,117.948496 24.602593,117.948427 24.602599,117.948362 24.602615,117.948299 24.602643,117.948255 24.602673,117.948218 24.602705,117.94819 24.602737,117.948176 24.602755,117.948147 24.602773,117.948094 24.602799,117.948064 24.602816,117.948024 24.602845,117.947993 24.602874,117.947964 24.602907,117.947934 24.602952,117.947915 24.602997,117.947905 24.60303,117.947898 24.603066,117.947896 24.603086,117.947891 24.603089,117.947857 24.603108,117.947809 24.603124,117.947755 24.603138,117.947594 24.603174,117.947561 24.603183,117.947531 24.603194,117.947503 24.603206,117.947469 24.603223,117.947422 24.603254,117.947368 24.603307,117.94733 24.60337,117.947311 24.603422,117.947302 24.603473,117.947301 24.603531,117.947311 24.603584,117.947328 24.603633,117.947357 24.603688,117.947394 24.603732,117.947415 24.603752,117.947429 24.603776,117.947456 24.603813,117.947477 24.603837,117.947506 24.603866,117.947543 24.603896,117.947582 24.603919,117.947612 24.603934,117.947646 24.603947,117.94768 24.603958,117.947707 24.603965,117.947742 24.603972,117.947865 24.603989,117.947867 24.603989,117.947976 24.604018,117.94801 24.604024,117.948045 24.604028,117.948078 24.60403,117.948248 24.604033,117.94832 24.604053,117.948325 24.604055,117.948342 24.604063,117.948349 24.604067,117.948362 24.604075,117.948385 24.604091,117.948427 24.604125,117.948589 24.604296,117.948593 24.604365,117.948614 24.60458,117.948614 24.604584,117.948613 24.604674,117.948612 24.60468,117.948612 24.604682,117.948533 24.604867,117.948529 24.604876,117.948461 24.604932,117.948434 24.60496,117.948415 24.604984,117.948399 24.605007,117.948384 24.605033,117.94837 24.60506,117.94836 24.605087,117.94835 24.605115,117.948341 24.60515,117.948337 24.605184,117.948335 24.605216,117.948335 24.605248,117.948337 24.605287,117.94835 24.605382,117.948349 24.605384,117.948346 24.605393,117.948344 24.605397,117.948341 24.605401,117.948228 24.605471,117.948194 24.605529,117.948068 24.60557,117.948025 24.605588,117.94799 24.605605,117.947947 24.605629,117.947913 24.605652,117.947879 24.60568,117.947846 24.605715,117.947818 24.605755,117.947798 24.605792,117.947797 24.605795,117.947767 24.605815,117.947744 24.605833,117.947691 24.605879,117.947663 24.605908,117.947635 24.605944,117.947605 24.605996,117.947586 24.606064,117.947585 24.60608,117.947584 24.606082,117.947544 24.606153,117.947525 24.606239,117.947535 24.60633,117.947574 24.606414,117.947589 24.606431,117.947585 24.606439,117.947578 24.606554,117.947625 24.606666,117.947697 24.606739,117.947767 24.60678,117.947828 24.606801,117.94788 24.606811,117.947943 24.606816,117.947949 24.606817,117.94795 24.606817,117.948069 24.606846,117.948106 24.606853,117.948137 24.606858,117.948141 24.606858,117.94822 24.606872,117.948249 24.606868,117.948248 24.606899,117.948269 24.606989,117.948336 24.607085,117.948431 24.607143,117.948494 24.607162,117.948582 24.607181,117.948649 24.607186,117.948729 24.607176,117.948809 24.607148,117.948887 24.607095,117.948947 24.60702,117.948969 24.606961,117.949014 24.607015,117.949066 24.60707,117.949075 24.607084,117.949101 24.60712,117.949148 24.607164,117.949197 24.607194,117.949238 24.607213,117.949276 24.607227,117.949315 24.607237,117.949354 24.607244,117.949391 24.607249,117.949422 24.607251,117.949466 24.607251,117.949513 24.607245,117.949562 24.607235,117.949636 24.607206,117.949721 24.607143,117.949766 24.607072,117.949778 24.607069,117.949807 24.607063,117.949835 24.607055,117.949862 24.607046,117.949888 24.607035,117.949914 24.607022,117.949941 24.607007,117.949969 24.606988,117.949993 24.606969))"
	points := s.Polygon2Points(pointText)
	fmt.Printf("Points:  %#v\n",points)
}

func initConf()  {
	confFile := "../conf/conf.yaml"
	err := conf.NewConf(confFile)
	if err !=nil {
		log.Fatalf("init conf unmarshal error: %s",err)
	}
}
//
func TestGetPatrol(t *testing.T)  {

	initConf()
	s := services.NewService()
	//
	patrol,err := s.RpcCli.GetPatrol(context.Background(),1)
	if err!=nil && err!= xorm.ErrNotExist{
		fmt.Printf("%#v\n",err)
	}
	// 如果数据为空
	if err == xorm.ErrNotExist {
		res := libs.Empty("查无数据",nil)
		bytes, _ := json.Marshal(res)
		fmt.Printf("noData %s\n",string(bytes))
		return
	}
	bytes, err := json.Marshal(patrol)
	fmt.Printf("now:%s\n",time.Now())
	fmt.Printf("patrol %s\n",string(bytes))
}

func TestGetPatrolList(t *testing.T)  {

	initConf()
	s := services.NewService()
	//
	list := &structs.GetPatrolList{
		List: structs.List{
			Page: 1,
			PageSize: 10,
		},
		UserID: 1,
	}
	patrol,err := s.RpcCli.GetPatrolList(context.Background(),list)
	if err!=nil{
		fmt.Printf("%#v\n",err)
	}
	bytes, err := json.Marshal(patrol)
	fmt.Printf("patrol %s\n",string(bytes))
}
func TestText2Point(t *testing.T) {
	//
	line := []byte("LINESTRING(118.18580627441 24.489547729492,118.18577575684 24.489524841309,118.18576049805 24.489471435547,118.18573760986 24.489490509033,118.18572235107 24.489492416382,118.18572998047 24.489473342896,118.18578338623 24.489496231079,118.18578338623 24.489496231079,118.18578338623 24.489496231079,118.18579864502 24.489545822144,118.18579864502 24.489553451538,118.18579864502 24.489555358887,118.18579864502 24.489555358887,118.18573760986 24.489534378052,118.18573760986 24.489534378052,118.1858291626 24.489515304565,118.1858291626 24.489515304565,118.18581390381 24.489473342896,118.18581390381 24.489473342896,118.18577575684 24.489444732666,118.18577575684 24.489444732666,118.18573760986 24.489465713501,118.18573760986 24.489465713501,118.18572235107 24.489749908447,118.18572235107 24.489749908447,118.18572235107 24.489744186401,118.18572235107 24.489744186401,118.18572235107 24.48973274231,118.18572235107 24.48973274231,118.18572235107 24.489728927612,118.18572235107 24.489728927612,118.18572998047 24.489730834961,118.18572998047 24.489730834961,118.18572998047 24.489734649658,118.18572998047 24.489734649658,118.18573760986 24.489740371704,118.18573760986 24.489740371704,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18573760986 24.489751815796,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428,118.18577575684 24.489498138428)");
	data := line[11:len(line)-1]

	points := Text2Point(data)
	fmt.Printf("points:%#v\n",points)
	//
	//dataArr := strings.Split(string(data),",")
	//fmt.Printf("dataArr:%#v\n",dataArr)
	//var points []structs.Point
	////
	//for _,item :=range dataArr {
	//	point := strings.Fields(item)
	//	fmt.Printf("point:%#v\n",point)
	//	//
	//	longitude,_:=strconv.ParseFloat(point[1],64)
	//	latitude,_:=strconv.ParseFloat(point[0],64)
	//	var height float64
	//	fmt.Printf("longitude:%f,latitude:%f\n",longitude,latitude)
	//	p := structs.Point{
	//		Latitude: longitude,
	//		Longitude: latitude,
	//		Height: height,
	//	}
	//	fmt.Printf("%#v\n",p)
	//	points = append(points,p)
	//	fmt.Printf("points:%#v\n",points)
	//}

}

func TestTime(t *testing.T)  {
	fmt.Printf("time %s\n",time.Now())
}
//
func TestPostPatrol(t *testing.T)  {
	//
	initConf()
	s := services.NewService()
	//
	postData := &structs.Patrol{
		Memo: "HelloWorld",
		RequestID: "7f550786c810e0ea5ec97446439156f1", // patrol
	}
	//
	patrol,err := s.RpcCli.PostPatrol(context.Background(),postData)
	if err!=nil{
		fmt.Printf("%#v\n",err)
	}
	fmt.Printf("%#v\n",patrol)
	//bytes, err := json.Marshal(patrol)
	//fmt.Printf("now:%s\n",time.Now())
	//fmt.Printf("patrol %s\n",string(bytes))
}

func TestArrAppend(t *testing.T)  {
	//
	arr := make([]int,10)
	for i:=0;i<10;i++ {
		arr = append(arr,i)
	}
	fmt.Printf("arr %#v\n",arr)
}
